---
  name: "Dev Application Deployment"

  on:
    # pull_request:
    #   paths:
    #     - '/**'
    push:
      branches:
     #   - main
        - dev-21
      paths:
        - '/**'

  env:
    GM_ENV: dev

  # permission can be added at job level or workflow level
  permissions:
    pull-requests: 'write'
    id-token: write   # This is required for requesting the JWT
    contents: read    # This is required for actions/checkout

  defaults:
    run:
      working-directory: /

  jobs:
    build:
      runs-on: ubuntu-latest

      steps:
        - name: Checkout repository
          uses: actions/checkout@v2

        - name: configure aws credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            role-to-assume: arn:aws:iam::700429856186:role/github-aws-deployment-ops-network
            role-session-name: githubtfsession
            aws-region: us-east-2

        - name: Build Docker image
          run: docker build -t sample:latest .

        - name: Authenticate Docker with ECR
          run: aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 700429856186.dkr.ecr.your-aws-region.amazonaws.com

        - name: Tag Docker image for ECR
          run: docker tag sample:latest 700429856186.dkr.ecr.us-east-2.amazonaws.com/sample:latest

        - name: Push Docker image to ECR
          run: docker push 00429856186.dkr.ecr.us-east-2.amazonaws.com/sample:latest

    terraform:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4
        - uses: hashicorp/setup-terraform@v2
          with:
            terraform_version: 1.6.1

        - name: Terraform Fmt
          id: fmt
          run: terraform fmt -check -diff -recursive
          continue-on-error: true

        - name: configure aws credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            role-to-assume: arn:aws:iam::700429856186:role/github-aws-deployment-ops-network
            role-session-name: githubtfsession
            aws-region: us-east-2

        - name: Terraform - Init
          id: init
          run: terraform init -upgrade -reconfigure

        - name: Terraform - Validate
          id: validate
          run: terraform validate -no-color

        - name: Terraform Plan
          id: plan
          run: terraform plan -no-color
          continue-on-error: true

        - name: Terraform - Show Plan in PR
          uses: actions/github-script@v6
          if: github.event_name == 'pull_request'
          with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            script: |
              // 1. Retrieve existing bot comments for the PR
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              })
              const botComment = comments.find(comment => {
                return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style') && comment.body.includes("#### Terraform Plan for ${{ env.TF_STATE_DETAIL }} ${{ env.GM_ENV }} ")
              })

              // 2. Prepare format of the comment
              const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
              #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
              #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
              <details><summary>Validation Output</summary>

              \`\`\`\n
              ${{ steps.validate.outputs.stdout }}
              \`\`\`

              </details>

              #### Terraform Plan for ${{ env.TF_STATE_DETAIL }} ${{ env.GM_ENV }} üìñ\`${{ steps.plan.outcome }}\`

              <details><summary>Show Plan</summary>

              \`\`\`\n
              ${{ steps.plan.outputs.stdout }}
              \`\`\`

              </details>

              *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ github.workspace }}\`, Workflow: \`${{ github.workflow }}\`*`;

              // 3. If we have a comment, update it, otherwise create a new one
              if (botComment) {
                github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: botComment.id,
                  body: output
                })
              } else {
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: output
                })
              }

        - name: Terraform apply
          if: github.ref == 'refs/heads/main' && github.event_name == 'push'
          run: terraform apply -auto-approve -input=false
